{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mwang\\\\websites\\\\consulting-website\\\\src\\\\context\\\\ThemeContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// src/context/ThemeContext.tsx\nimport React, { createContext, useContext, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ThemeContext = /*#__PURE__*/createContext(undefined);\nexport const ThemeProvider = ({\n  children\n}) => {\n  _s();\n  const [isDarkMode, setIsDarkMode] = useState(false);\n  const toggleTheme = () => {\n    setIsDarkMode(prev => !prev);\n  };\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    value: {\n      isDarkMode,\n      toggleTheme\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 5\n  }, this);\n};\n_s(ThemeProvider, \"vYJNNV25FHwH0TTZOrX//UDd4kA=\");\n_c = ThemeProvider;\nexport const useTheme = () => {\n  _s2();\n  const context = useContext(ThemeContext);\n  if (!context) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n};\n_s2(useTheme, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"ThemeProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","jsxDEV","_jsxDEV","ThemeContext","undefined","ThemeProvider","children","_s","isDarkMode","setIsDarkMode","toggleTheme","prev","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useTheme","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/mwang/websites/consulting-website/src/context/ThemeContext.tsx"],"sourcesContent":["// src/context/ThemeContext.tsx\r\nimport React, { createContext, useContext, useState } from 'react';\r\n\r\ninterface ThemeContextType {\r\n  isDarkMode: boolean;\r\n  toggleTheme: () => void;\r\n}\r\n\r\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);\r\n\r\nexport const ThemeProvider: React.FC = ({ children }) => {\r\n  const [isDarkMode, setIsDarkMode] = useState<boolean>(false);\r\n\r\n  const toggleTheme = () => {\r\n    setIsDarkMode((prev) => !prev);\r\n  };\r\n\r\n  return (\r\n    <ThemeContext.Provider value={{ isDarkMode, toggleTheme }}>\r\n      {children}\r\n    </ThemeContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useTheme = () => {\r\n  const context = useContext(ThemeContext);\r\n  if (!context) {\r\n    throw new Error('useTheme must be used within a ThemeProvider');\r\n  }\r\n  return context;\r\n};\r\n"],"mappings":";;;AAAA;AACA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAOnE,MAAMC,YAAY,gBAAGL,aAAa,CAA+BM,SAAS,CAAC;AAE3E,OAAO,MAAMC,aAAuB,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACvD,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGT,QAAQ,CAAU,KAAK,CAAC;EAE5D,MAAMU,WAAW,GAAGA,CAAA,KAAM;IACxBD,aAAa,CAAEE,IAAI,IAAK,CAACA,IAAI,CAAC;EAChC,CAAC;EAED,oBACET,OAAA,CAACC,YAAY,CAACS,QAAQ;IAACC,KAAK,EAAE;MAAEL,UAAU;MAAEE;IAAY,CAAE;IAAAJ,QAAA,EACvDA;EAAQ;IAAAQ,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACY,CAAC;AAE5B,CAAC;AAACV,EAAA,CAZWF,aAAuB;AAAAa,EAAA,GAAvBb,aAAuB;AAcpC,OAAO,MAAMc,QAAQ,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAC5B,MAAMC,OAAO,GAAGtB,UAAU,CAACI,YAAY,CAAC;EACxC,IAAI,CAACkB,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,8CAA8C,CAAC;EACjE;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,GAAA,CANWD,QAAQ;AAAA,IAAAD,EAAA;AAAAK,YAAA,CAAAL,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}